name: Build Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            binary_name: arm-emulator
          - os: darwin
            arch: arm64
            runner: macos-latest
            binary_name: arm-emulator
          - os: windows
            arch: amd64
            runner: windows-latest
            binary_name: arm-emulator.exe
          - os: windows
            arch: arm64
            runner: windows-latest
            binary_name: arm-emulator.exe

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Linux dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev pkg-config
          sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc || true

      - name: Get version info
        id: version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          COMMIT=${GITHUB_SHA::7}
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "Building $VERSION (commit: $COMMIT, date: $DATE)"

      - name: Build CLI
        run: |
          go build -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }} -X main.Commit=${{ steps.version.outputs.commit }} -X main.Date=${{ steps.version.outputs.date }}" -o ${{ matrix.binary_name }}
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - name: Build Wails GUI
        shell: bash
        working-directory: gui
        run: |
          LDFLAGS="-s -w -X main.Version=${{ steps.version.outputs.version }} -X main.Commit=${{ steps.version.outputs.commit }} -X main.Date=${{ steps.version.outputs.date }}"
          wails build -clean -platform ${{ matrix.os }}/${{ matrix.arch }} -ldflags "$LDFLAGS"
      
      - name: Sign macOS app
        if: matrix.os == 'darwin'
        run: |
          codesign --force --deep --sign - build/bin/arm-emulator.app
      
      - name: List build artifacts
        shell: bash
        run: |
          echo "=== Checking build directory ==="
          ls -laR build/ || echo "No build directory found"

      - name: Create release artifact name
        id: artifact
        shell: bash
        run: |
          # Map GOOS to user-friendly platform names
          case "${{ matrix.os }}" in
            darwin)
              PLATFORM="macos"
              ;;
            windows)
              PLATFORM="win"
              ;;
            linux)
              PLATFORM="linux"
              ;;
            *)
              PLATFORM="${{ matrix.os }}"
              ;;
          esac

          if [ "${{ matrix.os }}" = "windows" ]; then
            ARTIFACT_NAME="arm-emulator-${PLATFORM}-${{ matrix.arch }}.exe"
            cp ${{ matrix.binary_name }} "$ARTIFACT_NAME"
          else
            ARTIFACT_NAME="arm-emulator-${PLATFORM}-${{ matrix.arch }}"
            cp ${{ matrix.binary_name }} "$ARTIFACT_NAME"
          fi
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          
          # Determine GUI artifact location and name
          if [ "${{ matrix.os }}" = "darwin" ]; then
            GUI_SOURCE="build/bin/arm-emulator.app"
            GUI_ARTIFACT_NAME="arm-emulator-gui-${PLATFORM}-${{ matrix.arch }}.app.tar.gz"
            if [ -d "$GUI_SOURCE" ]; then
              tar -czf "$GUI_ARTIFACT_NAME" -C build/bin arm-emulator.app
              echo "gui_artifact_name=$GUI_ARTIFACT_NAME" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ matrix.os }}" = "windows" ]; then
            GUI_SOURCE="build/bin/arm-emulator-gui.exe"
            GUI_ARTIFACT_NAME="arm-emulator-gui-${PLATFORM}-${{ matrix.arch }}.exe"
            if [ -f "$GUI_SOURCE" ]; then
              cp "$GUI_SOURCE" "$GUI_ARTIFACT_NAME"
              echo "gui_artifact_name=$GUI_ARTIFACT_NAME" >> $GITHUB_OUTPUT
            fi
          else
            GUI_SOURCE="build/bin/arm-emulator-gui"
            GUI_ARTIFACT_NAME="arm-emulator-gui-${PLATFORM}-${{ matrix.arch }}"
            if [ -f "$GUI_SOURCE" ]; then
              cp "$GUI_SOURCE" "$GUI_ARTIFACT_NAME"
              echo "gui_artifact_name=$GUI_ARTIFACT_NAME" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate SHA256 checksum
        id: checksum
        shell: bash
        run: |
          ARTIFACT_NAME="${{ steps.artifact.outputs.artifact_name }}"
          CHECKSUM_FILE="${ARTIFACT_NAME}.sha256"

          # Generate SHA256 checksum in standard format (hash  filename)
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Use PowerShell to extract hash more reliably
            HASH=$(powershell -Command "(Get-FileHash -Algorithm SHA256 '$ARTIFACT_NAME').Hash.ToLower()")
            echo "$HASH  $ARTIFACT_NAME" > "$CHECKSUM_FILE"
          else
            shasum -a 256 "$ARTIFACT_NAME" > "$CHECKSUM_FILE"
          fi

          echo "checksum_file=$CHECKSUM_FILE" >> $GITHUB_OUTPUT

          # Display checksum for verification
          echo "Generated checksum:"
          cat "$CHECKSUM_FILE"
          
          # Generate checksum for GUI artifact if it exists
          GUI_ARTIFACT_NAME="${{ steps.artifact.outputs.gui_artifact_name }}"
          if [ -n "$GUI_ARTIFACT_NAME" ] && [ -f "$GUI_ARTIFACT_NAME" ]; then
            GUI_CHECKSUM_FILE="${GUI_ARTIFACT_NAME}.sha256"
            if [ "$RUNNER_OS" = "Windows" ]; then
              HASH=$(powershell -Command "(Get-FileHash -Algorithm SHA256 '$GUI_ARTIFACT_NAME').Hash.ToLower()")
              echo "$HASH  $GUI_ARTIFACT_NAME" > "$GUI_CHECKSUM_FILE"
            else
              shasum -a 256 "$GUI_ARTIFACT_NAME" > "$GUI_CHECKSUM_FILE"
            fi
            echo "gui_checksum_file=$GUI_CHECKSUM_FILE" >> $GITHUB_OUTPUT
            echo "Generated GUI checksum:"
            cat "$GUI_CHECKSUM_FILE"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact_name }}
          path: ${{ steps.artifact.outputs.artifact_name }}
          retention-days: 7

      - name: Upload checksum
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.checksum.outputs.checksum_file }}
          path: ${{ steps.checksum.outputs.checksum_file }}
          retention-days: 7

      - name: Upload GUI artifact
        if: steps.artifact.outputs.gui_artifact_name != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.gui_artifact_name }}
          path: ${{ steps.artifact.outputs.gui_artifact_name }}
          retention-days: 7

      - name: Upload GUI checksum
        if: steps.checksum.outputs.gui_checksum_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.checksum.outputs.gui_checksum_file }}
          path: ${{ steps.checksum.outputs.gui_checksum_file }}
          retention-days: 7

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "arm-emulator-*"
          path: artifacts
          merge-multiple: true

      - name: Create combined SHA256SUMS file
        run: |
          cd artifacts

          # Check if any checksum files exist
          if ! ls *.sha256 >/dev/null 2>&1; then
            echo "Error: No checksum files found!"
            exit 1
          fi

          # Combine all checksum files into SHA256SUMS
          cat *.sha256 > SHA256SUMS

          echo "Combined SHA256SUMS file:"
          cat SHA256SUMS

          # Verify SHA256SUMS is not empty
          if [ ! -s SHA256SUMS ]; then
            echo "Error: SHA256SUMS file is empty!"
            exit 1
          fi

          # Remove individual checksum files to avoid cluttering the release
          rm -f *.sha256

          # Count files
          echo "Release artifacts:"
          ls -lh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
